/**
 * Generated by GENERATOR
 * Date: 10/21/2020, 11:37:07 AM
 **/

import { MutationUpdaterFn } from 'apollo-boost';
import { Response, ValidateResult } from './interfaces/returnsInterfaces';
import { FetchPolicy } from '@/graphql/apolloProvider';
import { Type } from '@/utils/type';

export interface BaseModel<M> {
  _id: string;
  createdAt: string;
  updatedAt: string;
  __typename: string;

  save(
    scenarios?: string[],
    optimisticResponse?: any,
    update?: MutationUpdaterFn
  ): Promise<Response<M>>;

  validate(
    scenarios: string[],
    specific: boolean,
    fetchPolicy?: FetchPolicy
  ): Promise<ValidateResult>;

  delete(
    optimisticResponse?: object,
    update?: MutationUpdaterFn
  ): Promise<Response<M>>;

  assign(data: Partial<M>): void;
}

export function BaseModel<M>(
  service,
  createInputClass,
  updateInputClass
): Type<BaseModel<M>> {
  class BaseModelInner implements BaseModel<M> {
    public _id: string;
    public __typename: string;
    public createdAt: string;
    public updatedAt: string;

    constructor(data?: Partial<M>) {
      Object.assign(this, data);
    }

    public assign(data: Partial<M>) {
      Object.assign(this, data);
    }

    delete(
      optimisticResponse?: object,
      update?: MutationUpdaterFn
    ): Promise<Response<M>> {
      return service.deleteById(this._id, optimisticResponse, update);
    }

    save(
      scenarios?: string[],
      optimisticResponse?: any,
      update?: MutationUpdaterFn
    ): Promise<Response<M>> {
      if (this._id) {
        const updateInput = new updateInputClass(this);
        return service.updateById(
          updateInput,
          scenarios,
          optimisticResponse,
          update
        );
      } else {
        const createInput = new createInputClass(this);
        return service.create(
          createInput,
          scenarios,
          optimisticResponse,
          update
        );
      }
    }

    validate(
      scenarios: string[],
      specific: boolean,
      fetchPolicy?: FetchPolicy
    ): Promise<ValidateResult> {
      return service.validate(this, scenarios, specific, fetchPolicy);
    }
  }
  return BaseModelInner;
}
